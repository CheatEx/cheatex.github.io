<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="https://cheatex.github.io/" rel="self" type="application/rss+xml"/><title>cheatex</title><link>https://cheatex.github.io/</link><description>Yet another personal site</description><lastBuildDate>Tue, 20 Aug 2019 11:12:46 +0300</lastBuildDate><generator>clj-rss</generator><item><guid>https://cheatex.github.io/posts-output/2018-07-21-on-exceptions/</guid><link>https://cheatex.github.io/posts-output/2018-07-21-on-exceptions/</link><title>Проблема с исключениями</title><description>&lt;p&gt;С исключениями есть одна большая проблема. В каждой команде которую мне довелось встречать было своё уникальное видение как их "правильно" применять.&lt;/p&gt;&lt;p&gt;Какие? Где кидать? Когда кидать? Где ловить? Все эти вопросы дают комбинаторный взрыв стилей и широкий простор для самовыражения. Каждый вариант ответа имеет свои фатальные недостатки, но их можно и проигнорировать для любимого набора. Носители альтернативного набора ответов обрекают всех окружающих на вечные муки и должны немедленно высылаться прямиком в ад. (Ну или в недельное кодревью хотя бы.)&lt;/p&gt;&lt;p&gt;Набор который мне нравится:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;В понятных ситуациях кидаем checked ловим как только можем с ними что-то сделать.&lt;/li&gt;&lt;li&gt;В непонятных делаем assert, в случае религиозно-операционных трудностей создаем AssertionError.&lt;/li&gt;&lt;li&gt;Сторонний код признающийся в выбросе исключений или замеченный за этим заворачивем.&lt;/li&gt;&lt;li&gt;Error ловим только на уровне точек входа, вроде запуска потоков или обработки сети.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Да, и у него тоже есть фатальные недостатки.&lt;/p&gt;&lt;p&gt;А еще я не разу встречал различных мнений по тому как использовать &lt;a href='https://www.scala-lang.org/api/2.9.3/scala/Either.html'&gt;Either&lt;/a&gt;.&lt;/p&gt;</description><pubDate>Sat, 21 Jul 2018 00:00:00 +0300</pubDate></item><item><guid>https://cheatex.github.io/posts-output/2018-07-07-framework-evo/</guid><link>https://cheatex.github.io/posts-output/2018-07-07-framework-evo/</link><title>Эволюция фреймворков</title><description>&lt;p&gt;Вначале была уютная джавочка с API для файлов-сокетов и интерфейсом в ODBC.&lt;/p&gt;&lt;p&gt;Потом решили что так программировать сложно и забахали пакет API для серверных приложений. Появилась куча аббревиатур которые до сих пор позволяют HRам писать вакансии не приходя в сознание.&lt;/p&gt;&lt;p&gt;Потом решили что собирать адаптеры и конвертеры между этими аббревиатурами руками сложно. Расцвела концепция inversion of control, появились контейнеры вроде спринга и guice.&lt;/p&gt;&lt;p&gt;Чтобы запуститься и на машине разраба и в тесте и собственно на сервере эти контейнерам требовалась куча конфигов. Расписывать их было не просто, "Правильно" запустить такую конструкцию получалось не у всякого. Пошли в дело оболочки для контейнеров вроде boot. На горизонте замаячил призрак совсем других контейнеров.&lt;/p&gt;&lt;p&gt;Успеть везде не возможно. И пока выкристаллизовывался верный способ завернуть перегонялку из таблички БД в JSON этих перегонялок для приличного приложения стало требоваться несколько сотен. И каждую надо "Правильно" оформить чтобы потраченные ранее усилия не пропали даром. Светлые умы быстренько подыскали выход: &lt;a href='https://www.jhipster.tech/presentation/#/'&gt;Java Hipster&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Хочется собрать всех этих инноваторов и провести с ними воспитательную беседу примерно такого формата: &lt;a href='https://www.youtube.com/watch?v=7n_1zsCVBxw&amp;t=7'&gt;https://www.youtube.com/watch?v=7n_1zsCVBxw&amp;t=7&lt;/a&gt; (Один из лучших гейм-артов, смотреть на самом большом экране что есть и сделать погромче)&lt;/p&gt;</description><pubDate>Sat, 07 Jul 2018 00:00:00 +0300</pubDate></item><item><guid>https://cheatex.github.io/posts-output/2010-02-25-what-to-ask/</guid><link>https://cheatex.github.io/posts-output/2010-02-25-what-to-ask/</link><title>Что интересно спросить у работодателя</title><description>&lt;h3 id="анализ,&amp;#95;общение&amp;#95;с&amp;#95;пользователями"&gt;Анализ, общение с пользователями&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Откуда берутся требования?&lt;ul&gt;&lt;li&gt;Как оценивается их выполнение?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Требования пересматриваются?&lt;ul&gt;&lt;li&gt;По каким причинам?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Как часто пользователь получает результаты работы?&lt;/li&gt;&lt;li&gt;Участвуют ли пользователи и эксперты в разработке?&lt;ul&gt;&lt;li&gt;В каких формах?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Что предпринимается в случае выявления противоречивости требований?&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="процесс,&amp;#95;планирование"&gt;Процесс, планирование&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Как формируются задачи на основе требований?&lt;/li&gt;&lt;li&gt;Как оцениваются сроки их выполнения?&lt;/li&gt;&lt;li&gt;Что предпринимается в случае невозможности выполнения требований по&lt;ul&gt;&lt;li&gt;техническим причинам?&lt;/li&gt;&lt;li&gt;организационным причинам?&lt;/li&gt;&lt;li&gt;экономическим причинам?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="программирование"&gt;Программирование&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Какая VCS используется? Почему?&lt;/li&gt;&lt;li&gt;Есть-ли стандарт кодирования?&lt;ul&gt;&lt;li&gt;Какие аспекты кода он регламентирует?&lt;/li&gt;&lt;li&gt;Как контроллируется его соблюдение?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Сколько человек видят/рецензируют код до его попадания в production?&lt;ul&gt;&lt;li&gt;Как это обеспечивается?&lt;/li&gt;&lt;li&gt;Обязательно-ли исправление по итогам сбора отзывов?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Как происходит сборка продукта?&lt;/li&gt;&lt;li&gt;Есть-ли система автоматической сборки?&lt;ul&gt;&lt;li&gt;Какие действия она предпринимает в случае успеха/неудачи сборки?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Имеет-ли разработчик в своём распоряжении полный стенд разрабатываемого продукта или какие-то его части?&lt;ul&gt;&lt;li&gt;Этот стенд изолирован от других разработчиков?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="контроль&amp;#95;качества,&amp;#95;тестирование"&gt;Контроль качества, тестирование&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;На какие уровнях производится тестирование?&lt;ul&gt;&lt;li&gt;Как каждый из них автоматизирован?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Есть-ли люди ответственные за контроль качества?&lt;ul&gt;&lt;li&gt;Сколько их от общего числа разработчиков?&lt;/li&gt;&lt;li&gt;Какие задачи они решают?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><pubDate>Thu, 25 Feb 2010 00:00:00 +0300</pubDate></item><item><guid>https://cheatex.github.io/posts-output/2008-10-22-jboss-per-app-logs/</guid><link>https://cheatex.github.io/posts-output/2008-10-22-jboss-per-app-logs/</link><title>Раздельные логи приложений в JBoss</title><description>&lt;p&gt;Встала задача организовать раздельную запись логов для нескольких экземпляров одного и того-же приложения, запущенных на сервере(разделение экземпяров просто переименование war-ок). При этом дополнительно хотелось получить также: конфигурирование логов отдельно от самого сервера(читай не в серверном &lt;code&gt;jboss-log4j.xml&lt;/code&gt;, а в собственном конфиге приложения, один экземпляр log4j как на диске, так и в памяти.&lt;/p&gt;&lt;p&gt;Простая упаковка конфига вместе с приложением успеха, как и ожидалось, не принесла. Если верить форумам/мэйллистам причина в том, что по умолчанию JBoss подкладывает приложениям свои библиотеки в класспат, соответственно приложения используют уже инициализированный экземпляр log4j.&lt;/p&gt;&lt;p&gt;Вторым этапом стала попытка использовать хак со слушателем контекста и установкой в нём &lt;code&gt;RepositorySelector&lt;/code&gt; взятый &lt;a href='http://docs.jboss.org/process-guide/en/html/logging.html'&gt;тут&lt;/a&gt;, раздел 10.3.8(что примечательно попал он мне на глаза сначала в каком-то блоге, а не в оф. доке). Работал он плохо: при переразвёртываниии приложения падала ошибка при инициализации JBoss log4j plugin. Думаю из за того, что при этом старый ClassLoader убивается и все созданные им классы вместе с ним. Заниматься дебагом сервера было немного лень, а сообщение обошибке было, мягко говоря, кратким.&lt;/p&gt;&lt;p&gt;В третий заход применил подход описанный &lt;a href='http://docs.jboss.org/process-guide/en/html/logging.html'&gt;там-же&lt;/a&gt; в разделе 10.3.6. А именно: положил в папку &lt;code&gt;WEB-INF/lib&lt;/code&gt; log4j и commons-logging(в своём приложении на всякий случай решил использовать его, а не напряму log4j), положил в папку &lt;code&gt;WEB-INF/classes&lt;/code&gt; свой &lt;code&gt;log4j.xml&lt;/code&gt; а также создал файлик &lt;code&gt;jboss-web.xml&lt;/code&gt;(до этого обходился стандартным дескриптором) с содержимым, описанным в доке чуть ниже.&lt;/p&gt;&lt;p&gt;Потом ещё переучил оставшийся с прошлой попытки листенер записывать в системные свойства имена приложения(точнее контекста) и конфига(&lt;code&gt;log4j.xml&lt;/code&gt;). (В спринге есть специальный, более одарённый листенер для этих целей, но спринга пока в проекте нет и связываться было лень.)&lt;/p&gt;&lt;p&gt;Commons-logging увидел старшого брата без дополнительных манипуляций.&lt;/p&gt;&lt;p&gt;Результат: аккуратненький набор папочек в &lt;code&gt;/log&lt;/code&gt; сервера с подневными логами соответствующих приложений. Надо отметить, что это, между тем, не совсем нирвана ибо экземпляр log4j на каждое приложение - и память не по делу и место на диске... в эпоху гигабайтных планок не сильно проблемно, но всё-таки. Есть мнение, что если поглубже покопать в серверный класслоадинг (точнее хоть чуть-чуть копнуть, ибо то, что вписал в конфигурашку я понял приближённо) можно её и достичь...&lt;/p&gt;</description><pubDate>Wed, 22 Oct 2008 00:00:00 +0400</pubDate></item></channel></rss>