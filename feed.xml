<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="https://cheatex.cc/" rel="self" type="application/rss+xml"/><title>cheatex</title><link>https://cheatex.cc/</link><description>Yet another personal site</description><lastBuildDate>Wed, 21 Aug 2019 12:15:10 +0300</lastBuildDate><generator>clj-rss</generator><item><guid>https://cheatex.cc/posts-output/2019-06-03-elements-of-programming/</guid><link>https://cheatex.cc/posts-output/2019-06-03-elements-of-programming/</link><title>Начала программирования</title><description>&lt;p&gt;У меня уже лет 5 в закромах лежала довольно занимательная книга "Начала программирования" Степанова. Что характерно я её купил на книжном развале за старухой за 50 рублей. Где-то полгода назад почувствовал что борода стала достаточно густой чтобы попробовать её открыть.&lt;/p&gt;&lt;p&gt;Книга неплоха, но тяжела для чтения без необходимости.&lt;/p&gt;&lt;p&gt;Основное внимание уделено отношению между математическими концепциями, их выражением в ЯП и непосредственно структурами в памяти. Это довольно интересный топкик, обычно как в литературе таки и во всяких блого-конференциях один из аспектов начисто игнорируется. Содержание построено грамотно и в принципе старается идти от простого к сложному. Автор не пытается объять всё сразу, а плавно строит инструментарий и применяет его в простых но имеющих смысл для бывалого программиста задачах. Математические аспекты напоминаются бегло и немного путанно, видимо пару раз на почитать чтонить по алгебре придётся отвлечься.&lt;/p&gt;&lt;p&gt;Язык крайне тяжёл. Много собственной терминологии. Причём термины многословны и похожи, много времени тратится на листание назад в поисках определения. Можно было радикально упростить восприятие небольшими врезками с напоминанием терминологии.  Также не хватает диаграмм, особенно при обсуждении бифуркатных координат, переупорядочений и вспомогательных "машин". Пришлось много рисовать самому чтобы въехать.&lt;/p&gt;&lt;p&gt;В общем типичный экземпляр позднесоветской литературы. Если есть хорошее представление что хочешь от книги получить и тебе повезло быть с автором примерно на одной волне то можно подчерпнуть много интересных идей. Если нет - идите нахер, у нас тут фундаментальное образование, мы тут не развлекаться собрались, надо привыкать  страдать.&lt;/p&gt;&lt;p&gt;Эксперты рекомендуют для расширения сознания.&lt;/p&gt;</description><pubDate>Mon, 03 Jun 2019 00:00:00 +0300</pubDate></item><item><guid>https://cheatex.cc/posts-output/2019-03-27-web-improved/</guid><link>https://cheatex.cc/posts-output/2019-03-27-web-improved/</link><title>The HTML we shouldn't ever have</title><description>&lt;p&gt;Мне попался &lt;a href='http://skch.net/view.php?page=articles&amp;post=bhtml'&gt;проект как сделать вэб лучше&lt;/a&gt; и что-то мне кажется проработан он весьма поверхностно...&lt;/p&gt;&lt;p&gt;Для начала автор сетует что аттрибут &lt;code&gt;src&lt;/code&gt; не был внедрён повсеместно, а только для &lt;code&gt;img&lt;/code&gt;. В частности:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Everyone was fascinated with the new features, and most likely the reason why no one had a wit to ask: why don’t we let all the other HTML elements also use this attribute?  &lt;h1 src="/website/info/title"&gt; &lt;/h1&gt;  This code means that the browser must load the content of the heading from the provided URL. Maybe it doesn’t make much sense for such a small element, but what about a div or an article? &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Дальше больше, автор предлагает ввести подстановки в язык разметки, в духе&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;name&amp;quot;&amp;gt;George&amp;lt;/div&amp;gt;
&amp;lt;h1&amp;gt;Welcome, $name&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Дело тут какое. Во-первых src много где есть, например в &lt;a href='https://www.owasp.org/index.php/Cross_Frame_Scripting'&gt;полюбившемся всем&lt;/a&gt; &lt;code&gt;iframe&lt;/code&gt;. И кое-где он &lt;a href='https://www.owasp.org/index.php/Clickjacking'&gt;уже доставляет&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Во-вторых давайте почитаем что говорит один из авторов современного web про проблемы которые он пытался решить.&lt;/p&gt;&lt;p&gt;Что требовалось от HTML и где он не справился:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; HTML is an example of a media type that, for the most part, has good latency  characteristics. Information within early HTML could be rendered as it was received... &lt;/p&gt;&lt;p&gt; However, there are aspects of HTML that were not designed well for latency. Examples include: ...;&lt;br /&gt; embedded images without rendering size hints, requiring that the first few bytes of the image&lt;br /&gt; (the part that contains the layout size) be received before the rest of the surrounding HTML&lt;br /&gt; can be displayed; dynamically sized table columns, requiring that the renderer read&lt;br /&gt; and determine sizes for the entire table before it can start displaying the top; ... &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;В моём понимании рац. предложение из поста - сразу два шага назад. Первый - больше запросов на страницу, второй - еще больше компонентов которые не могут рисоваться до полной загрузки.&lt;/p&gt;&lt;p&gt;Теперь немного оценки &lt;code&gt;src&lt;/code&gt; в контексте &lt;code&gt;iframe&lt;/code&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; ... The introduction of “frames” to the Hypertext Markup Language (HTML) caused  similar confusion. Frames allow a browser window to be partitioned into subwindows,  each with its own navigational state. Link selections within a subwindow are  indistinguishable from normal transitions, but the resulting response representation is  rendered within the subwindow instead of the full browser application workspace. This is  fine provided that no link exits the realm of information that is intended for subwindow  treatment, but when it does occur the user finds themself viewing one application wedged  within the subcontext of another application. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Здесь нельзя указать на очевидную деградацию, own navigational state вроде не предлагается. Но предлагается использовать в src переменные с не совсем понятной областью видимости персистентностью. Ограничения на куда &lt;code&gt;src&lt;/code&gt; ходит типа тоже не нужны?&lt;/p&gt;&lt;p&gt;Ничего не сказано о том как читать/писать/переопределять стили и новые $-переменные в подгруженных из src элементах. Без модели каскадирования - это просто размахивание руками. Проблему с ней ведь и пытаемся решить, не?&lt;/p&gt;</description><pubDate>Wed, 27 Mar 2019 00:00:00 +0300</pubDate></item><item><guid>https://cheatex.cc/posts-output/2019-03-23-on-interviews/</guid><link>https://cheatex.cc/posts-output/2019-03-23-on-interviews/</link><title>Про интервью</title><description>&lt;p&gt;На нтервью реально интересно узнать о гребце следующее.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Способность быстро въезжать в более менее значительное количество кода. Не 10 строк с кастами лонгов в байты а в десяток-другой тысяч со всем возможным креативом.&lt;/li&gt;&lt;li&gt;Большой рабочий диапазон на шкале говнокодим быстро - делаем на века медленно.&lt;/li&gt;&lt;li&gt;Уменее дебагать. На основе п. 1 и общих идей о том что не так строить путь из простых вопросов о поведении кода. И отвечаяя на них приходить к точке поломки.&lt;/li&gt;&lt;li&gt;Способность самостоятельно убедиться что его произведение работает в правдоподобных обстоятельствах. В идеале еще умение эти обстоятельства выяснить.&lt;/li&gt;&lt;li&gt;Ну и физическую способность грести хотя бы часов 20 в неделю, в перспективных стартапах и поболе. Я естественно про время в потоке, а не время за проходной.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Эти вопросы объединяет то что реалистичные ответы на них можно получить не раньше чем через месяц. Так что имеем на собесах то что имеем, смешное разбирательство с cultural fitом. Да, вращения деревья и отличия интерфейсов от абстрактных классов это культура и ничего общего с техническими навыками не имеют.&lt;/p&gt;</description><pubDate>Sat, 23 Mar 2019 00:00:00 +0300</pubDate></item><item><guid>https://cheatex.cc/posts-output/2019-02-27-fire-and-motion-2019/</guid><link>https://cheatex.cc/posts-output/2019-02-27-fire-and-motion-2019/</link><title>Fire and motion 2019</title><description>&lt;p&gt; Немного реалий андроид программирования.&lt;/p&gt;&lt;p&gt;Сегодня понадобилось сделать тест работающий непосредственно на устройстве. (Никогда, слышите никогда не вводите зависимости между дествительно важным функционалом и любыми нативными API).&lt;/p&gt;&lt;p&gt;Сделал по гайду. Впилил зависимость &lt;code&gt;androidx.test:runner:1.1.0&lt;/code&gt;, повесил &lt;code&gt;@RunWith&amp;#40;AndroidJUnit4.class&amp;#41;&lt;/code&gt; на тест. Тут мне говорят ахтунг, 1.1.0 устарел, надо на 1.1.1 обновляться. Обновился, иду в код. Там снова ахтунг, &lt;code&gt;androidx.test.runner.AndroidJUnit4&lt;/code&gt; устарел, надо &lt;code&gt;androidx.test.ext.junit.runners.AndroidJUnit4&lt;/code&gt;. Поправил, одна беда - такого класса нет. Иду на SO, там советуют &lt;code&gt;androidx.test.ext:junit:1.1.0&lt;/code&gt;. Ну я то стаинг ап-ту-дейт, сразу на 1.1.1 поправил. Билдим - всё наёбывается, &lt;code&gt;androidx.test.ext:junit:1.1.1&lt;/code&gt; отсутсвует. Вдох, выдох, всё откатываем на 1.1.0. Билдим, билдицо. Запускаем тест - всё наёбывается, 2 экрана ошибок. Ещё глубже вдох, помедленнее выдох чтоб в голову не дало. Возвращаем аннотацию &lt;code&gt;androidx.test.runner.AndroidJUnit4&lt;/code&gt;. Работает!!!&lt;/p&gt;&lt;p&gt;А теперь 2 интересные детали. &lt;i&gt;Deprecation warning&lt;/i&gt; можно сапреснуть только во всём классе сразу. Gradle &lt;i&gt;dependency inspection&lt;/i&gt; нельзя сапреснуть вообще, только выключить полностью.&lt;/p&gt;&lt;p&gt;Интересно, зачем выпускать несовместимое обновление с изменением в 3 числе версии? Зачем рекомендовать миграцию с работающего класса на сломаный? Зачем заставлять делящихся прибылью разработчиков выбирать между кучей нерелевантных ворнингов и риском пропустить критичное изменение?&lt;/p&gt;&lt;p&gt;Классики проясняют &lt;a href='https://www.joelonsoftware.com/2002/01/06/fire-and-motion/'&gt;Fire And Motion&lt;/a&gt;.&lt;/p&gt;</description><pubDate>Wed, 27 Feb 2019 00:00:00 +0300</pubDate></item><item><guid>https://cheatex.cc/posts-output/2019-02-13-conditional-failures/</guid><link>https://cheatex.cc/posts-output/2019-02-13-conditional-failures/</link><title>Странный гайд по исключениям от гуавы</title><description>&lt;p&gt;Наткнулся тут на &lt;a href='https://github.com/google/guava/wiki/ConditionalFailuresExplained'&gt;гайд по пользованию исключениями в Guava&lt;/a&gt;, и видимо в джавовских проектах гугла.&lt;/p&gt;&lt;p&gt;Первое что бросается в глаза Rationale пропущен. Второе - 6 вариантов ответа для фундаментального вопроса это реально дохера. Если вчитаться тоже есть вопросы.&lt;/p&gt;&lt;p&gt;Мне показалось что основная проблема которая решается применением этой конвенции - поиск виноватых. Краткое изложение в табличке целиком про кто "messed up".&lt;/p&gt;&lt;p&gt;Не понятно зачем сюда втянут exceptional result. Типа контракт штуки такой, ожидаемое поведение. Test assertion его частный случай, ничего требующего выделения отдельного пункта не сказано. Дальше в табличке предлагают &lt;code&gt;AssertionError&lt;/code&gt; для него, видиом чтобы по ошибке не ловить падение теста вместо своего исключения. Но это стоило прояснять явно и в формате примечания к exceptional result.&lt;/p&gt;&lt;p&gt;&lt;i&gt;Precondition&lt;/i&gt; check важный частный случай, всё-таки это ситуация когда у кода нет в принципе возможности сделать задуманое. Можно согласиться.&lt;/p&gt;&lt;p&gt;&lt;i&gt;Assertion&lt;/i&gt; - понятно, поддерживаю.&lt;/p&gt;&lt;p&gt;&lt;i&gt;Verification check&lt;/i&gt; пункт про поиск виноватых и пинг-понг. Никакой разницы почему вмерло нет, нарушено ожидание, действуем по плану assertion. А тут добавлен отдельный пункт и класс с утилитами под него.&lt;/p&gt;&lt;p&gt;&lt;i&gt;Impossible-condition&lt;/i&gt; check вообще не понимаю зачем нужен, всё еще assertion.&lt;/p&gt;&lt;p&gt;В этой системе есть проблема: легко ловить что-то тебе не предназначенное. Если есть контракты с исключениями то в код который их использует может приехать и &lt;i&gt;precondition check&lt;/i&gt; и &lt;i&gt;verification check&lt;/i&gt;. Чтобы работало ко всей конструкции надо еще добавлять правило в духе "не ловим &lt;code&gt;Exception&lt;/code&gt; и &lt;code&gt;RuntimeException&lt;/code&gt; в прикладном коде". И правило какой код уже можно считать системным. А потом еще правило про catch который на самом деле finally. Ну вы поняли.&lt;/p&gt;&lt;p&gt;Вывод: там тоже всё плохо. На Java надо писать без ошибок или не писать вообще.&lt;/p&gt;</description><pubDate>Wed, 13 Feb 2019 00:00:00 +0300</pubDate></item><item><guid>https://cheatex.cc/posts-output/2018-12-26-on-vs-code/</guid><link>https://cheatex.cc/posts-output/2018-12-26-on-vs-code/</link><title>Про VS Code</title><description>&lt;p&gt;Я тут еще довольно плотно посидел на VS Code. На удивление дельная вещь. Работает совсем неплохо в плане производительности и глючности. На жёсткие баги пока не налетал, не тормозит на i5 480M!&lt;/p&gt;&lt;p&gt;Из встроеных плюшек мне нравятся: всплывающий просмотр кода, терминал и его удобная интеграция с билдами, несколько вариантов навигации по табам.&lt;/p&gt;&lt;p&gt;Плагинов много на всё что можно придумать. Многие кажется ещё в процессе допила, явно не хватает функциональности.&lt;/p&gt;&lt;p&gt;Среда поддерживает двухсоставные хоткеи, когда жмёшь одну комбинацию и потом вторую. Простые хоткеи в основном разобраны самим редактором, а плагины используют двухсоставные. Сначала казалось дичью. Но потом понял что одна стартовая комбинация для плагина + мнемоника для конкретной функции очень удобно запоминается. В результате через небольшой промежуток времени хоткеи используются ативнее чем в других редакторах. Нет  конфликтов типа нужна мнемоника на eval а Ctrl+e и Alt+e заняты.&lt;/p&gt;&lt;p&gt;Я с ней связался  ради Clojure, по итогам считаю VS code наиболее цивилизованным вариантом. В emacs я не смог. В основном всё работает после установки одного плагина: Calva. Нельзя сказать что прям блестяще работает, но лучше чем франкенштейны которые у меня собирались на базе Sublime. Дешевле Cursive.&lt;/p&gt;</description><pubDate>Wed, 26 Dec 2018 00:00:00 +0300</pubDate></item><item><guid>https://cheatex.cc/posts-output/2018-12-22-on-scala/</guid><link>https://cheatex.cc/posts-output/2018-12-22-on-scala/</link><title>Проблема со скалой</title><description>&lt;p&gt;Мне кажется очень большая беда языка scala в количестве понабежавших фанатиков хаскеля, упорно портирующих его бибилотеки и техники программирования. В своём порыве они мало на что обращают внимание (включая просьбы &lt;a href='https://twitter.com/odersky/status/382631934729277440'&gt;свалить подальше&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;При этом есть ряд техник которые в скажем так прикладном программировании не менее полезны, и языком очень хорошо поодерживаются. Это стиль больше похожий на ML модули и функторы. Про него есть &lt;a href='http://web.archive.org/web/20140815233646/http://blog.pellucid.com/post/94532532890/scalas-modular-roots-by-dan-james-earlier-this'&gt;отличное введение&lt;/a&gt; так и некоторые более серьёзные работы. Но сообщество как прикладников так и разработчиков бибилотек этот аспект языка в основном игнорирует. Беда понятна - техники всё ещё далеки от С++-style OOP и трудны в освоении. А чувства интеллектуального превосходства дают меньше, чем монад-трансформеры. В основном из отсутсвия стада евангелистов в твиттере.&lt;/p&gt;&lt;p&gt;Ещё пара ссылок для заинтересовавшихся:  &lt;a href='http://lampwww.epfl.ch/~odersky/papers/ScalableComponent.pdf'&gt;Scalable Component Abstractions&lt;/a&gt;  &lt;a href='https://pdfs.semanticscholar.org/84b1/d4f7c6d3e243508d153d7e8a10b3d7d33f2c.pdf'&gt;Objects + Views = Components?&lt;/a&gt;&lt;/p&gt;</description><pubDate>Sat, 22 Dec 2018 00:00:00 +0300</pubDate></item><item><guid>https://cheatex.cc/posts-output/2018-12-07-makejavagreateagain/</guid><link>https://cheatex.cc/posts-output/2018-12-07-makejavagreateagain/</link><title>Make Java great again</title><description>&lt;h3 id="про&amp;#95;импорты"&gt;Про импорты&lt;/h3&gt;&lt;p&gt;Понял что одной из самых недостающих фич в яве являются алиасы в импортах. Крайне удобно и помогает в борьбе с многословностью. Нужен на всех уровнях, для пакетов, классов и методов. &lt;/p&gt;&lt;p&gt;Вместо&lt;/p&gt;&lt;pre&gt;&lt;code&gt;blah.blah.blah.views
∟EditView
∟ShareView
∟ProfileView
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;И обращений типа &lt;code&gt;myFrameworkRenderer.view&amp;#40;new ProfileView&amp;#40;&amp;#41;&amp;#41;&lt;/code&gt; везде.&lt;/p&gt;&lt;p&gt;Можно будет делать&lt;/p&gt;&lt;pre&gt;&lt;code&gt;blah.blah.blah.views
∟Edit
∟Share
∟Profile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;В далёком-далёком коде писать &lt;code&gt;views.Profile.DATE&amp;#95;FORMAT&lt;/code&gt;, а гденить поближе &lt;code&gt;myFrameworkRenderer.view&amp;#40;new Profile&amp;#40;&amp;#41;&amp;#41;&lt;/code&gt;.&lt;/p&gt;&lt;h3 id="про&amp;#95;kwargs"&gt;Про kwargs&lt;/h3&gt;&lt;p&gt;Если еще чуть подумать то вторая довольно простая штука (с точки зрения накатать пост в телеге) которой не хватает - keyword arguments.&lt;/p&gt;&lt;p&gt;В основном со стороны вызова. Как ни крути бывают методы и с 4 и с 12 параметрами. Разбираться где что большая трата времени, тут редкий случай когда побольше слов пойдут на пользу.&lt;/p&gt;&lt;p&gt;Я вкурсе про идеевские хинты. Но они ломают форматирование и их нет в гитхабе. (Тут у меня возникло желание начать серию про перспективы структурных редакторов, но я мужественно держусь.)&lt;/p&gt;&lt;h3 id="про&amp;#95;культуру"&gt;Про культуру&lt;/h3&gt;&lt;p&gt;Реально основная проблема с программированием на яве - культура. Сегодня попал на глаза кусок старого кода. Много слов. Очень много слов. Когда я начинал работать все по привычке использовали отбивку 80 символов, потом 120, сейчас уже 150-180 норма. Только вот на 14'' код уже не прочитать. И это только ширина. И пофиксить то не проблема.&lt;/p&gt;&lt;p&gt;Названия больше 4х слов нахер. Ничего понять они не помогают. Читать новый код тяжело и травматично для самолюбия, deal with it. Придумывайте новые новые названия, используйте аналогии, вырабатывайте идиомы. Кто может без доки рассказать разницу между &lt;code&gt;StaticListableBeanFactory&lt;/code&gt; и &lt;code&gt;DefaultListableBeanFactory&lt;/code&gt; может бросить в меня камень. Использовать такие названия в письменно коммуникации боль в устной просто невозможно. Когда 5 классов делят 3-4 слова в префиксе или суффиксе никакой возможности завести для них отдельные места в голове нет, кодовая база сливается в невнятную жижу.&lt;/p&gt;&lt;p&gt;get/set нахер. Абсолютно бесполезная трата места на экране. Выдумана от безысходности С кодерами к которым пришли менеджеры и сказали что теперь надо программировать объектно-ориентировано. Никакой абстракции не даёт, вариантов реализации отличных от return/= просто нет. Пользовать &lt;code&gt;public final&lt;/code&gt; поля, если совсем приперает удалять &lt;code&gt;final&lt;/code&gt;. Я не имею в виду методы которые реально что-то ищут или создают, вроде любимого &lt;code&gt;getBean&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Ну это так, чисто площадку от мусора очистить. Хотя почти никто даже этого не делает.&lt;/p&gt;&lt;h3 id="ссылки"&gt;Ссылки&lt;/h3&gt;&lt;p&gt;&lt;a href='https://www.youtube.com/watch?v=ZsHMHukIlJY'&gt;Seven Ineffective Coding Habits of Many Programmers&lt;/a&gt; У чувака довольно дельные идеи по энтерпрайз стилю. Правда изложение крайне водянистое, эксперты советуют смотреть под сидр.&lt;/p&gt;</description><pubDate>Fri, 07 Dec 2018 00:00:00 +0300</pubDate></item><item><guid>https://cheatex.cc/posts-output/2018-07-21-on-exceptions/</guid><link>https://cheatex.cc/posts-output/2018-07-21-on-exceptions/</link><title>Проблема с исключениями</title><description>&lt;p&gt;С исключениями есть одна большая проблема. В каждой команде которую мне довелось встречать было своё уникальное видение как их "правильно" применять.&lt;/p&gt;&lt;p&gt;Какие? Где кидать? Когда кидать? Где ловить? Все эти вопросы дают комбинаторный взрыв стилей и широкий простор для самовыражения. Каждый вариант ответа имеет свои фатальные недостатки, но их можно и проигнорировать для любимого набора. Носители альтернативного набора ответов обрекают всех окружающих на вечные муки и должны немедленно высылаться прямиком в ад. (Ну или в недельное кодревью хотя бы.)&lt;/p&gt;&lt;p&gt;Набор который мне нравится:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;В понятных ситуациях кидаем checked ловим как только можем с ними что-то сделать.&lt;/li&gt;&lt;li&gt;В непонятных делаем assert, в случае религиозно-операционных трудностей создаем AssertionError.&lt;/li&gt;&lt;li&gt;Сторонний код признающийся в выбросе исключений или замеченный за этим заворачивем.&lt;/li&gt;&lt;li&gt;Error ловим только на уровне точек входа, вроде запуска потоков или обработки сети.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Да, и у него тоже есть фатальные недостатки.&lt;/p&gt;&lt;p&gt;А еще я не разу встречал различных мнений по тому как использовать &lt;a href='https://www.scala-lang.org/api/2.9.3/scala/Either.html'&gt;Either&lt;/a&gt;.&lt;/p&gt;</description><pubDate>Sat, 21 Jul 2018 00:00:00 +0300</pubDate></item><item><guid>https://cheatex.cc/posts-output/2018-07-07-framework-evo/</guid><link>https://cheatex.cc/posts-output/2018-07-07-framework-evo/</link><title>Эволюция фреймворков</title><description>&lt;p&gt;Вначале была уютная джавочка с API для файлов-сокетов и интерфейсом в ODBC.&lt;/p&gt;&lt;p&gt;Потом решили что так программировать сложно и забахали пакет API для серверных приложений. Появилась куча аббревиатур которые до сих пор позволяют HRам писать вакансии не приходя в сознание.&lt;/p&gt;&lt;p&gt;Потом решили что собирать адаптеры и конвертеры между этими аббревиатурами руками сложно. Расцвела концепция inversion of control, появились контейнеры вроде спринга и guice.&lt;/p&gt;&lt;p&gt;Чтобы запуститься и на машине разраба и в тесте и собственно на сервере эти контейнерам требовалась куча конфигов. Расписывать их было не просто, "Правильно" запустить такую конструкцию получалось не у всякого. Пошли в дело оболочки для контейнеров вроде boot. На горизонте замаячил призрак совсем других контейнеров.&lt;/p&gt;&lt;p&gt;Успеть везде не возможно. И пока выкристаллизовывался верный способ завернуть перегонялку из таблички БД в JSON этих перегонялок для приличного приложения стало требоваться несколько сотен. И каждую надо "Правильно" оформить чтобы потраченные ранее усилия не пропали даром. Светлые умы быстренько подыскали выход: &lt;a href='https://www.jhipster.tech/presentation/#/'&gt;Java Hipster&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Хочется собрать всех этих инноваторов и провести с ними воспитательную беседу примерно такого формата: &lt;a href='https://www.youtube.com/watch?v=7n_1zsCVBxw&amp;t=7'&gt;https://www.youtube.com/watch?v=7n_1zsCVBxw&amp;t=7&lt;/a&gt; (Один из лучших гейм-артов, смотреть на самом большом экране что есть и сделать погромче)&lt;/p&gt;</description><pubDate>Sat, 07 Jul 2018 00:00:00 +0300</pubDate></item><item><guid>https://cheatex.cc/posts-output/2010-02-25-what-to-ask/</guid><link>https://cheatex.cc/posts-output/2010-02-25-what-to-ask/</link><title>Что интересно спросить у работодателя</title><description>&lt;h3 id="анализ,&amp;#95;общение&amp;#95;с&amp;#95;пользователями"&gt;Анализ, общение с пользователями&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Откуда берутся требования?&lt;ul&gt;&lt;li&gt;Как оценивается их выполнение?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Требования пересматриваются?&lt;ul&gt;&lt;li&gt;По каким причинам?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Как часто пользователь получает результаты работы?&lt;/li&gt;&lt;li&gt;Участвуют ли пользователи и эксперты в разработке?&lt;ul&gt;&lt;li&gt;В каких формах?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Что предпринимается в случае выявления противоречивости требований?&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="процесс,&amp;#95;планирование"&gt;Процесс, планирование&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Как формируются задачи на основе требований?&lt;/li&gt;&lt;li&gt;Как оцениваются сроки их выполнения?&lt;/li&gt;&lt;li&gt;Что предпринимается в случае невозможности выполнения требований по&lt;ul&gt;&lt;li&gt;техническим причинам?&lt;/li&gt;&lt;li&gt;организационным причинам?&lt;/li&gt;&lt;li&gt;экономическим причинам?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="программирование"&gt;Программирование&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Какая VCS используется? Почему?&lt;/li&gt;&lt;li&gt;Есть-ли стандарт кодирования?&lt;ul&gt;&lt;li&gt;Какие аспекты кода он регламентирует?&lt;/li&gt;&lt;li&gt;Как контроллируется его соблюдение?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Сколько человек видят/рецензируют код до его попадания в production?&lt;ul&gt;&lt;li&gt;Как это обеспечивается?&lt;/li&gt;&lt;li&gt;Обязательно-ли исправление по итогам сбора отзывов?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Как происходит сборка продукта?&lt;/li&gt;&lt;li&gt;Есть-ли система автоматической сборки?&lt;ul&gt;&lt;li&gt;Какие действия она предпринимает в случае успеха/неудачи сборки?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Имеет-ли разработчик в своём распоряжении полный стенд разрабатываемого продукта или какие-то его части?&lt;ul&gt;&lt;li&gt;Этот стенд изолирован от других разработчиков?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="контроль&amp;#95;качества,&amp;#95;тестирование"&gt;Контроль качества, тестирование&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;На какие уровнях производится тестирование?&lt;ul&gt;&lt;li&gt;Как каждый из них автоматизирован?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Есть-ли люди ответственные за контроль качества?&lt;ul&gt;&lt;li&gt;Сколько их от общего числа разработчиков?&lt;/li&gt;&lt;li&gt;Какие задачи они решают?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><pubDate>Thu, 25 Feb 2010 00:00:00 +0300</pubDate></item><item><guid>https://cheatex.cc/posts-output/2008-10-22-jboss-per-app-logs/</guid><link>https://cheatex.cc/posts-output/2008-10-22-jboss-per-app-logs/</link><title>Раздельные логи приложений в JBoss</title><description>&lt;p&gt;Встала задача организовать раздельную запись логов для нескольких экземпляров одного и того-же приложения, запущенных на сервере(разделение экземпяров просто переименование war-ок). При этом дополнительно хотелось получить также: конфигурирование логов отдельно от самого сервера(читай не в серверном &lt;code&gt;jboss-log4j.xml&lt;/code&gt;, а в собственном конфиге приложения, один экземпляр log4j как на диске, так и в памяти.&lt;/p&gt;&lt;p&gt;Простая упаковка конфига вместе с приложением успеха, как и ожидалось, не принесла. Если верить форумам/мэйллистам причина в том, что по умолчанию JBoss подкладывает приложениям свои библиотеки в класспат, соответственно приложения используют уже инициализированный экземпляр log4j.&lt;/p&gt;&lt;p&gt;Вторым этапом стала попытка использовать хак со слушателем контекста и установкой в нём &lt;code&gt;RepositorySelector&lt;/code&gt; взятый &lt;a href='http://docs.jboss.org/process-guide/en/html/logging.html'&gt;тут&lt;/a&gt;, раздел 10.3.8(что примечательно попал он мне на глаза сначала в каком-то блоге, а не в оф. доке). Работал он плохо: при переразвёртываниии приложения падала ошибка при инициализации JBoss log4j plugin. Думаю из за того, что при этом старый ClassLoader убивается и все созданные им классы вместе с ним. Заниматься дебагом сервера было немного лень, а сообщение обошибке было, мягко говоря, кратким.&lt;/p&gt;&lt;p&gt;В третий заход применил подход описанный &lt;a href='http://docs.jboss.org/process-guide/en/html/logging.html'&gt;там-же&lt;/a&gt; в разделе 10.3.6. А именно: положил в папку &lt;code&gt;WEB-INF/lib&lt;/code&gt; log4j и commons-logging(в своём приложении на всякий случай решил использовать его, а не напряму log4j), положил в папку &lt;code&gt;WEB-INF/classes&lt;/code&gt; свой &lt;code&gt;log4j.xml&lt;/code&gt; а также создал файлик &lt;code&gt;jboss-web.xml&lt;/code&gt;(до этого обходился стандартным дескриптором) с содержимым, описанным в доке чуть ниже.&lt;/p&gt;&lt;p&gt;Потом ещё переучил оставшийся с прошлой попытки листенер записывать в системные свойства имена приложения(точнее контекста) и конфига(&lt;code&gt;log4j.xml&lt;/code&gt;). (В спринге есть специальный, более одарённый листенер для этих целей, но спринга пока в проекте нет и связываться было лень.)&lt;/p&gt;&lt;p&gt;Commons-logging увидел старшого брата без дополнительных манипуляций.&lt;/p&gt;&lt;p&gt;Результат: аккуратненький набор папочек в &lt;code&gt;/log&lt;/code&gt; сервера с подневными логами соответствующих приложений. Надо отметить, что это, между тем, не совсем нирвана ибо экземпляр log4j на каждое приложение - и память не по делу и место на диске... в эпоху гигабайтных планок не сильно проблемно, но всё-таки. Есть мнение, что если поглубже покопать в серверный класслоадинг (точнее хоть чуть-чуть копнуть, ибо то, что вписал в конфигурашку я понял приближённо) можно её и достичь...&lt;/p&gt;</description><pubDate>Wed, 22 Oct 2008 00:00:00 +0400</pubDate></item></channel></rss>